{"version":3,"sources":["webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js","webpack:///./components/UserPreferences/hotkeysConfig.js","webpack:///./components/UserPreferences/hotkeysValidators.js","webpack:///./components/UserPreferences/HotkeysPreferences.js","webpack:///./components/UserPreferences/WindowLevelPreferences.js","webpack:///./components/UserPreferences/GeneralPreferences.js","webpack:///./components/UserPreferences/UserPreferences.js","webpack:///./components/Header/Header.js","webpack:///./connectedComponents/ConnectedHeader.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js","webpack:///./connectedComponents/ZipFileData.js"],"names":["scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","state","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","props","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","setState","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","_onDerivedDisplaySetsLoadedAndCached","updateButtonGroups","panelModules","extensionManager","modules","MODULE_TYPES","PANEL","this","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","studies","activeViewport","menuOptionEntry","value","target","icon","bottomLabel","label","unshift","t","document","addEventListener","removeEventListener","prevProps","activeContextsChanged","prevStudies","prevActiveViewport","shouldUpdate","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","className","style","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","Component","_getCustomButtonComponent","CustomComponent","activeButtonsIds","map","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","PropTypes","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","array","any","modal","withTranslation","withModal","withDialog","withAppContext","utils","studyMetadataManager","setActiveViewportSpecificData","ConnectedStudyBrowser","stackLoadingProgressMap","loading","progress","studiesWithLoadingData","study","thumbnails","displaySetInstanceUID","stackId","stackProgressData","stackPercentComplete","percentComplete","onThumbnailClick","displaySet","studyMetadata","isArray","reduce","all","current","currentDisplaySet","displaySets","concat","ds","findDisplaySetByUID","isDerived","Modality","getSourceDisplaySet","Error","StudyBrowser","ViewportPane","children","onDrop","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","StudyInstanceUID","collect","highlighted","hovered","classNames","ref","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","logger","useLogger","useEffect","promise","catch","error","message","show","autoClose","ViewportPanes","React","useMemo","pluginName","ViewportComponent","JSON","stringify","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","height","width","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","isOpen","fromSideClass","styles","maxWidth","marginRight","Number","parseInt","UIModalService","servicesManager","services","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","Viewer","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","studyInstanceUIDs","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","_getActiveViewport","dismissAll","timepointApi","measurementApi","currentTimepointId","_mapStudiesToThumbnails","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","undefined","linkPath","createLogoComponentFn","isDerivedDisplaySetsLoaded","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","getActiveViewport","shape","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","_checkForSeriesInconsistencesWarnings","warningsList","warningIssues","warning","ReconstructionIssues","DATASET_4D","VARYING_IMAGESDIMENSIONS","VARYING_IMAGESCOMPONENTS","VARYING_IMAGESORIENTATION","IRREGULAR_SPACING","MULTIFFRAMES","missingFrames","warn","imageId","altImageText","imageIndex","Math","floor","hasWarnings","setTimepoints","setMeasurements","getActiveServer","servers","a","ConnectedViewer","MODIFIER_KEYS","DISALLOWED_COMBINATIONS","alt","shift","ctrl","formatPressedKeys","pressedKeysArray","join","ERROR_MESSAGES","hotkeysValidators","pressedKeys","hasError","errorMessage","lastPressedKey","conflictingCommand","hotkeys","currentCommandName","firstConflictingCommand","formatedPressedHotkeys","toolHotkeys","findConflictingCommand","modifierCommand","disallowedCombination","initialState","hotkeyDefinitions","errors","validateCommandKey","validation","validator","splitHotkeys","splitedHotkeys","arrayHotkeys","entries","halfwayThrough","ceil","HotkeysPreferences","onClose","useTranslation","hotkeyDefaults","hotkeysManager","hasErrors","hasHotkeys","Fragment","index","hotkey","hotkeyDefinition","data-key","modifier_keys","handleChange","prevState","onHotkeyChanged","onResetPreferences","defaultHotKeyDefinitions","item","onSave","setHotkeys","localStorage","setItem","onCancel","WindowLevelPreferences","useDispatch","windowLevelData","useSelector","preferences","handleInputChange","event","$target","dataset","inputname","inputValue","description","data-inputname","window","level","setUserPreferences","GeneralPreferences","currentLanguage","i18n","language","availableLanguages","setLanguage","htmlFor","onLanguageChange","languages","defaultLanguage","changeLanguage","tabs","customProps","UserPreferences","hide","Header","user","useLargeLogo","location","setOptions","hasLink","optionsValue","AboutContent","signoutRedirect","studyLink","to","pathname","list","align","OHIFLogo","withRouter","oidc","FileLoader","file","image","PDFFileLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","StudyTime","AccessionNumber","ReferringPhysicianName","PatientName","PatientBirthdate","PatientSex","StudyId","StudyDescription","SeriesInstanceUID","instances","metadata","SOPInstanceUID","SOPClassUID","Rows","Columns","NumberOfFrames","isLocalFile","metadataProvider","cornerstone","DICOMFileLoader","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","addInstance","_meta","namifyDataset","meta","e","console","getStudyFromDataset","PatientBirthDate","StudyID","instance","url","FileLoaderService","fileType","loader","getLoader","groupBy","groupByKey","listKey","nonKeyCounter","acc","obj","studyGroup","seriesGrouped","fileManager","add","loadFile","getDataset","getStudies","processFile","fileLoaderService","addFile","filesToStudies","files","processFilesPromises","groupSeries","flat","JSZip","require","OHIFStudyMetadata","ViewerLocalFileData","purge","updatedStudies","sopClassHandlerModules","createDisplaySets","forEachDisplaySet","displayset","localFile","onLoad","urlParams","URLSearchParams","search","get","fetch","then","response","blob","zip","loadAsync","filename","async","File","updateStudies","noClick","getRootProps","getInputProps","cursor"],"mappings":"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","file":"ZipFileData.bundle.11fa8ad7b79a9a79cb29.js","sourcesContent":["import { connect } from 'react-redux';\nimport { CineDialog } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport csTools from 'cornerstone-tools';\nimport { commandsManager } from './../App.js';\n// Our target output kills the `as` and \"import\" throws a keyword error\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst toolImport = csTools.import;\nconst scrollToIndex = toolImport('util/scrollToIndex');\nconst { setViewportSpecificData } = OHIF.redux.actions;\n\n// Why do I need or care about any of this info?\n// A dispatch action should be able to pull this at the time of an event?\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\nconst mapStateToProps = state => {\n  // Get activeViewport's `cine` and `stack`\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\n\n  const cineData = cine || {\n    isPlaying: false,\n    cineFrameRate: 24,\n  };\n\n  // New props we're creating?\n  return {\n    activeEnabledElement: dom,\n    activeViewportCineData: cineData,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  const {\n    activeEnabledElement,\n    activeViewportCineData,\n    activeViewportIndex,\n  } = propsFromState;\n\n  return {\n    cineFrameRate: activeViewportCineData.cineFrameRate,\n    isPlaying: activeViewportCineData.isPlaying,\n    onPlayPauseChanged: isPlaying => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.isPlaying = !cine.isPlaying;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onFrameRateChanged: frameRate => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.cineFrameRate = frameRate;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onClickNextButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\n      if (currentImageIdIndex >= imageIds.length - 1) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\n    },\n    onClickBackButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex } = stackData.data[0];\n      if (currentImageIdIndex === 0) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\n    },\n    onClickSkipToStart: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      scrollToIndex(activeEnabledElement, 0);\n    },\n    onClickSkipToEnd: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const lastIndex = stackData.data[0].imageIds.length - 1;\n      scrollToIndex(activeEnabledElement, lastIndex);\n    },\n  };\n};\n\nconst ConnectedCineDialog = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(CineDialog);\n\nexport default ConnectedCineDialog;\n","import { LayoutButton } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\n\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  return {\n    currentLayout: state.viewports.layout,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // TODO: Change if layout switched becomes more complex\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\n      const viewports = [];\n      const numRows = selectedCell.row + 1;\n      const numColumns = selectedCell.col + 1;\n      const numViewports = numRows * numColumns;\n\n      for (let i = 0; i < numViewports; i++) {\n        // Hacky way to allow users to exit MPR \"mode\"\n        const viewport = currentLayout.viewports[i];\n        let plugin = viewport && viewport.plugin;\n        if (viewport && viewport.vtk) {\n          plugin = 'cornerstone';\n        }\n\n        viewports.push({\n          plugin,\n        });\n      }\n      const layout = {\n        numRows,\n        numColumns,\n        viewports,\n      };\n\n      const maxActiveIndex = numViewports - 1;\n      if (activeViewportIndex > maxActiveIndex) {\n        dispatch(setViewportActive(0));\n      }\n\n      dispatch(setLayout(layout));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch) => {\n  const onChangeFromDispatch = propsFromDispatch.onChange;\n  const { currentLayout, activeViewportIndex } = propsFromState;\n\n  return {\n    onChange: selectedCell =>\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\n  };\n};\n\nconst ConnectedLayoutButton = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(LayoutButton);\n\nexport default ConnectedLayoutButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\n\nimport { MODULE_TYPES } from '@ohif/core';\nimport {\n  ExpandableToolMenu,\n  RoundedButtonGroup,\n  ToolbarButton,\n  withModal,\n  withDialog,\n} from '@ohif/ui';\n\nimport './ToolbarRow.css';\nimport { commandsManager, extensionManager } from './../App.js';\n\nimport ConnectedCineDialog from './ConnectedCineDialog';\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\nimport { withAppContext } from '../context/AppContext';\n\nclass ToolbarRow extends Component {\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\n  // closed if selected is null/undefined\n  static propTypes = {\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\n    selectedLeftSidePanel: PropTypes.string.isRequired,\n    selectedRightSidePanel: PropTypes.string.isRequired,\n    handleSidePanelChange: PropTypes.func.isRequired,\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\n    studies: PropTypes.array,\n    t: PropTypes.func.isRequired,\n    // NOTE: withDialog, withModal HOCs\n    dialog: PropTypes.any,\n    modal: PropTypes.any,\n  };\n\n  static defaultProps = {\n    studies: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\n    // TODO:\n    // If it's a tool that can be active... Mark it as active?\n    // - Tools that are on/off?\n    // - Tools that can be bound to multiple buttons?\n\n    // Normal ToolbarButtons...\n    // Just how high do we need to hoist this state?\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\n    this.state = {\n      toolbarButtons: toolbarButtonDefinitions,\n      activeButtons: [],\n    };\n\n    this.seriesPerStudyCount = [];\n\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\n    this._onDerivedDisplaySetsLoadedAndCached = this._onDerivedDisplaySetsLoadedAndCached.bind(\n      this\n    );\n\n    this.updateButtonGroups();\n  }\n\n  updateButtonGroups() {\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    this.buttonGroups = {\n      left: [],\n      right: [],\n    };\n\n    // ~ FIND MENU OPTIONS\n    panelModules.forEach(panelExtension => {\n      const panelModule = panelExtension.module;\n      const defaultContexts = Array.from(panelModule.defaultContext);\n\n      panelModule.menuOptions.forEach(menuOption => {\n        const contexts = Array.from(menuOption.context || defaultContexts);\n        const hasActiveContext = this.props.activeContexts.some(actx =>\n          contexts.includes(actx)\n        );\n\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\n        // Note: This does not cleanly handle `studies` prop updating with panel open\n        const isDisabled =\n          typeof menuOption.isDisabled === 'function' &&\n          menuOption.isDisabled(this.props.studies, this.props.activeViewport);\n\n        if (hasActiveContext && !isDisabled) {\n          const menuOptionEntry = {\n            value: menuOption.target,\n            icon: menuOption.icon,\n            bottomLabel: menuOption.label,\n          };\n          const from = menuOption.from || 'right';\n\n          this.buttonGroups[from].push(menuOptionEntry);\n        }\n      });\n    });\n\n    // TODO: This should come from extensions, instead of being baked in\n    this.buttonGroups.left.unshift({\n      value: 'studies',\n      icon: 'th-large',\n      bottomLabel: this.props.t('Series'),\n    });\n  }\n\n  componentDidMount() {\n    /*\n     * TODO: Improve the way we notify parts of the app\n     * that depends on derived display sets to be loaded.\n     * (Implement pubsub for better tracking of derived display sets)\n     */\n    document.addEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  _onDerivedDisplaySetsLoadedAndCached() {\n    this.updateButtonGroups();\n    this.setState({\n      toolbarButtons: _getVisibleToolbarButtons.call(this),\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const activeContextsChanged =\n      prevProps.activeContexts !== this.props.activeContexts;\n\n    const prevStudies = prevProps.studies;\n    const prevActiveViewport = prevProps.activeViewport;\n    const activeViewport = this.props.activeViewport;\n    const studies = this.props.studies;\n    const seriesPerStudyCount = this.seriesPerStudyCount;\n\n    let shouldUpdate = false;\n\n    if (\n      prevStudies.length !== studies.length ||\n      prevActiveViewport !== activeViewport\n    ) {\n      shouldUpdate = true;\n    } else {\n      for (let i = 0; i < studies.length; i++) {\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\n          seriesPerStudyCount[i] = studies[i].series.length;\n\n          shouldUpdate = true;\n          break;\n        }\n      }\n    }\n\n    if (shouldUpdate) {\n      this.updateButtonGroups();\n    }\n\n    if (activeContextsChanged) {\n      this.setState(\n        {\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\n        },\n        this.closeCineDialogIfNotApplicable\n      );\n    }\n  }\n\n  closeCineDialogIfNotApplicable = () => {\n    const { dialog } = this.props;\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\n    if (dialogId) {\n      const cineButtonPresent = toolbarButtons.find(\n        button => button.options && button.options.behavior === 'CINE'\n      );\n      if (!cineButtonPresent) {\n        dialog.dismiss({ id: dialogId });\n        activeButtons = activeButtons.filter(\n          button => button.options && button.options.behavior !== 'CINE'\n        );\n        this.setState({ dialogId: null, activeButtons });\n      }\n    }\n  };\n\n  render() {\n    const buttonComponents = _getButtonComponents.call(\n      this,\n      this.state.toolbarButtons,\n      this.state.activeButtons\n    );\n\n    const onPress = (side, value) => {\n      this.props.handleSidePanelChange(side, value);\n    };\n    const onPressLeft = onPress.bind(this, 'left');\n    const onPressRight = onPress.bind(this, 'right');\n\n    return (\n      <>\n        <div className=\"ToolbarRow\">\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\n            <RoundedButtonGroup\n              options={this.buttonGroups.left}\n              value={this.props.selectedLeftSidePanel || ''}\n              onValueChanged={onPressLeft}\n            />\n          </div>\n          {buttonComponents}\n          <ConnectedLayoutButton />\n          <div\n            className=\"pull-right m-t-1 rm-x-1\"\n            style={{ marginLeft: 'auto' }}\n          >\n            {this.buttonGroups.right.length && (\n              <RoundedButtonGroup\n                options={this.buttonGroups.right}\n                value={this.props.selectedRightSidePanel || ''}\n                onValueChanged={onPressRight}\n              />\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction _getCustomButtonComponent(button, activeButtons) {\n  const CustomComponent = button.CustomComponent;\n  const isValidComponent = typeof CustomComponent === 'function';\n\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\n  if (isValidComponent) {\n    const parentContext = this;\n    const activeButtonsIds = activeButtons.map(button => button.id);\n    const isActive = activeButtonsIds.includes(button.id);\n\n    return (\n      <CustomComponent\n        parentContext={parentContext}\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\n        button={button}\n        key={button.id}\n        activeButtons={activeButtonsIds}\n        isActive={isActive}\n      />\n    );\n  }\n}\n\nfunction _getExpandableButtonComponent(button, activeButtons) {\n  // Iterate over button definitions and update `onClick` behavior\n  let activeCommand;\n  const childButtons = button.buttons.map(childButton => {\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\n\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\n      activeCommand = childButton.id;\n    }\n\n    return childButton;\n  });\n\n  return (\n    <ExpandableToolMenu\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      buttons={childButtons}\n      activeCommand={activeCommand}\n    />\n  );\n}\n\nfunction _getDefaultButtonComponent(button, activeButtons) {\n  return (\n    <ToolbarButton\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      onClick={_handleToolbarButtonClick.bind(this, button)}\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\n    />\n  );\n}\n/**\n * Determine which extension buttons should be showing, if they're\n * active, and what their onClick behavior should be.\n */\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\n  const _this = this;\n  return toolbarButtons.map(button => {\n    const hasCustomComponent = button.CustomComponent;\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\n\n    if (hasCustomComponent) {\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\n    }\n\n    if (hasNestedButtonDefinitions) {\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\n    }\n\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\n  });\n}\n\n/**\n * TODO: DEPRECATE\n * This is used exclusively in `extensions/cornerstone/src`\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\n *\n * A handy way for us to handle different button types. IE. firing commands for\n * buttons, or initiation built in behavior.\n *\n * @param {*} button\n * @param {*} evt\n * @param {*} props\n */\nfunction _handleToolbarButtonClick(button, evt, props) {\n  const { activeButtons } = this.state;\n\n  if (button.commandName) {\n    const options = Object.assign({ evt }, button.commandOptions);\n    commandsManager.runCommand(button.commandName, options);\n  }\n\n  // TODO: Use Types ENUM\n  // TODO: We can update this to be a `getter` on the extension to query\n  //       For the active tools after we apply our updates?\n  if (button.type === 'setToolActive') {\n    const toggables = activeButtons.filter(\n      ({ options }) => options && !options.togglable\n    );\n    this.setState({ activeButtons: [...toggables, button] });\n  } else if (button.type === 'builtIn') {\n    this._handleBuiltIn(button);\n  }\n}\n\n/**\n *\n */\nfunction _getVisibleToolbarButtons() {\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\n  const toolbarButtonDefinitions = [];\n\n  toolbarModules.forEach(extension => {\n    const { definitions, defaultContext } = extension.module;\n    definitions.forEach(definition => {\n      const context = definition.context || defaultContext;\n\n      if (this.props.activeContexts.includes(context)) {\n        toolbarButtonDefinitions.push(definition);\n      }\n    });\n  });\n\n  return toolbarButtonDefinitions;\n}\n\nfunction _handleBuiltIn(button) {\n  /* TODO: Keep cine button active until its unselected. */\n  const { dialog, t } = this.props;\n  const { dialogId } = this.state;\n  const { id, options } = button;\n\n  if (options.behavior === 'CINE') {\n    if (dialogId) {\n      dialog.dismiss({ id: dialogId });\n      this.setState(state => ({\n        dialogId: null,\n        activeButtons: [\n          ...state.activeButtons.filter(button => button.id !== id),\n        ],\n      }));\n    } else {\n      const spacing = 20;\n      const { x, y } = document\n        .querySelector(`.ViewerMain`)\n        .getBoundingClientRect();\n      const newDialogId = dialog.create({\n        content: ConnectedCineDialog,\n        defaultPosition: {\n          x: x + spacing || 0,\n          y: y + spacing || 0,\n        },\n      });\n      this.setState(state => ({\n        dialogId: newDialogId,\n        activeButtons: [...state.activeButtons, button],\n      }));\n    }\n  }\n\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\n    commandsManager.runCommand('showDownloadViewportModal', {\n      title: t('Download High Quality Image'),\n    });\n  }\n}\n\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\n  withModal(withDialog(withAppContext(ToolbarRow)))\n);\n","import OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { StudyBrowser } from '@ohif/ui';\nimport cloneDeep from 'lodash.clonedeep';\nimport findDisplaySetByUID from './findDisplaySetByUID';\n\nconst { studyMetadataManager } = OHIF.utils;\n\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\n\n// TODO\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\n// - Pass in errors and stack loading progress from Redux\nconst mapStateToProps = (state, ownProps) => {\n  // If we know that the stack loading progress details have changed,\n  // we can try to update the component state so that the thumbnail\n  // progress bar is updated\n  const stackLoadingProgressMap = state.loading.progress;\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\n\n  studiesWithLoadingData.forEach(study => {\n    study.thumbnails.forEach(data => {\n      const { displaySetInstanceUID } = data;\n      const stackId = `StackProgress:${displaySetInstanceUID}`;\n      const stackProgressData = stackLoadingProgressMap[stackId];\n\n      let stackPercentComplete = 0;\n      if (stackProgressData) {\n        stackPercentComplete = stackProgressData.percentComplete;\n      }\n\n      data.stackPercentComplete = stackPercentComplete;\n    });\n  });\n\n  return {\n    studies: studiesWithLoadingData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onThumbnailClick: displaySetInstanceUID => {\n      let displaySet = findDisplaySetByUID(\n        ownProps.studyMetadata,\n        displaySetInstanceUID\n      );\n\n      if (displaySet.isDerived) {\n        const { Modality } = displaySet;\n\n        displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\n\n        if (!displaySet) {\n          throw new Error(\n            `Referenced series for ${Modality} dataset not present.`\n          );\n        }\n\n        if (!displaySet) {\n          throw new Error('Source data not present');\n        }\n      }\n\n      dispatch(setActiveViewportSpecificData(displaySet));\n    },\n  };\n};\n\nconst ConnectedStudyBrowser = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StudyBrowser);\n\nexport default ConnectedStudyBrowser;\n","/**\n * Finds displaySet by UID across all displaySets inside studyMetadata\n * @param {Array} studyMetadata\n * @param {string} displaySetInstanceUID\n */\nexport default function findDisplaySetByUID(\n  studyMetadata,\n  displaySetInstanceUID\n) {\n  if (!Array.isArray(studyMetadata)) return null;\n\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\n    let currentDisplaySet = [];\n    if (current && Array.isArray(current.displaySets)) {\n      currentDisplaySet = current.displaySets;\n    }\n    return all.concat(currentDisplaySet);\n  }, []);\n\n  const bySetInstanceUID = ds =>\n    ds.displaySetInstanceUID === displaySetInstanceUID;\n\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\n  return displaySet || null;\n}\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './ViewportPane.css';\n\nconst ViewportPane = function (props) {\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\n  const [{ hovered, highlighted }, drop] = useDrop({\n    accept: 'thumbnail',\n    drop: (droppedItem, monitor) => {\n      const canDrop = monitor.canDrop();\n      const isOver = monitor.isOver();\n\n      if (canDrop && isOver && onDrop) {\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\n\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\n      }\n    },\n    // Monitor, and collect props.\n    // Returned as values by `useDrop`\n    collect: monitor => ({\n      highlighted: monitor.canDrop(),\n      hovered: monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div\n      className={classNames(\n        'viewport-drop-target',\n        { hovered: hovered },\n        { highlighted: highlighted },\n        propClassName\n      )}\n      ref={drop}\n      data-cy={`viewport-container-${viewportIndex}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nViewportPane.propTypes = {\n  children: PropTypes.node.isRequired,\n  viewportIndex: PropTypes.number.isRequired,\n  onDrop: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default ViewportPane;\n","import './ViewportGrid.css';\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { utils } from '@ohif/core';\nimport { useSnackbarContext, useLogger } from '@ohif/ui';\n//\nimport ViewportPane from './ViewportPane.js';\nimport DefaultViewport from './DefaultViewport.js';\nimport EmptyViewport from './EmptyViewport.js';\n\nconst { loadAndCacheDerivedDisplaySets } = utils;\n\nconst ViewportGrid = function(props) {\n  const {\n    activeViewportIndex,\n    availablePlugins,\n    defaultPlugin: defaultPluginName,\n    layout,\n    numRows,\n    numColumns,\n    setViewportData,\n    studies,\n    viewportData,\n    children,\n    isStudyLoaded,\n  } = props;\n\n  const rowSize = 100 / numRows;\n  const colSize = 100 / numColumns;\n\n  // http://grid.malven.co/\n  if (!viewportData || !viewportData.length) {\n    return null;\n  }\n\n  const snackbar = useSnackbarContext();\n  const logger = useLogger();\n\n  useEffect(() => {\n    if (isStudyLoaded) {\n      viewportData.forEach(displaySet => {\n        const promises = loadAndCacheDerivedDisplaySets(displaySet, studies);\n        promises.forEach(promise => {\n          promise.catch(error => {\n            logger.error({ error, message: error.message });\n            snackbar.show({\n              title: 'Error loading derived display set:',\n              message: error.message,\n              type: 'error',\n              error,\n              autoClose: false,\n            });\n          });\n        });\n      });\n    }\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\n\n  const getViewportPanes = () =>\n    layout.viewports.map((layout, viewportIndex) => {\n      const displaySet = viewportData[viewportIndex];\n\n      if (!displaySet) {\n        return null;\n      }\n\n      const data = {\n        displaySet,\n        studies,\n      };\n\n      // JAMES TODO:\n\n      // Use whichever plugin is currently in use in the panel\n      // unless nothing is specified. If nothing is specified\n      // and the display set has a plugin specified, use that.\n      //\n      // TODO: Change this logic to:\n      // - Plugins define how capable they are of displaying a SopClass\n      // - When updating a panel, ensure that the currently enabled plugin\n      // in the viewport is capable of rendering this display set. If not\n      // then use the most capable available plugin\n\n      const pluginName =\n        !layout.plugin && displaySet && displaySet.plugin\n          ? displaySet.plugin\n          : layout.plugin;\n\n      const ViewportComponent = _getViewportComponent(\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\n        viewportIndex,\n        children,\n        availablePlugins,\n        pluginName,\n        defaultPluginName\n      );\n\n      return (\n        <ViewportPane\n          onDrop={setViewportData}\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\n          className={classNames('viewport-container', {\n            active: activeViewportIndex === viewportIndex,\n          })}\n          key={viewportIndex}\n        >\n          {ViewportComponent}\n        </ViewportPane>\n      );\n    });\n\n  const ViewportPanes = React.useMemo(getViewportPanes, [\n    layout,\n    viewportData,\n    studies,\n    children,\n    availablePlugins,\n    defaultPluginName,\n    setViewportData,\n    activeViewportIndex,\n  ]);\n\n  return (\n    <div\n      data-cy=\"viewprt-grid\"\n      style={{\n        display: 'grid',\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\n        height: '100%',\n        width: '100%',\n      }}\n    >\n      {ViewportPanes}\n    </div>\n  );\n};\n\nViewportGrid.propTypes = {\n  viewportData: PropTypes.array.isRequired,\n  supportsDrop: PropTypes.bool.isRequired,\n  activeViewportIndex: PropTypes.number.isRequired,\n  layout: PropTypes.object.isRequired,\n  availablePlugins: PropTypes.object.isRequired,\n  setViewportData: PropTypes.func.isRequired,\n  studies: PropTypes.array,\n  children: PropTypes.node,\n  defaultPlugin: PropTypes.string,\n  numRows: PropTypes.number.isRequired,\n  numColumns: PropTypes.number.isRequired,\n};\n\nViewportGrid.defaultProps = {\n  viewportData: [],\n  numRows: 1,\n  numColumns: 1,\n  layout: {\n    viewports: [{}],\n  },\n  activeViewportIndex: 0,\n  supportsDrop: true,\n  availablePlugins: {\n    DefaultViewport,\n  },\n  defaultPlugin: 'defaultViewportPlugin',\n};\n\n/**\n *\n *\n * @param {*} plugin\n * @param {*} viewportData\n * @param {*} viewportIndex\n * @param {*} children\n * @returns\n */\nfunction _getViewportComponent(\n  viewportData,\n  viewportIndex,\n  children,\n  availablePlugins,\n  pluginName,\n  defaultPluginName\n) {\n  if (viewportData.displaySet) {\n    pluginName = pluginName || defaultPluginName;\n    const ViewportComponent = availablePlugins[pluginName];\n\n    if (!ViewportComponent) {\n      throw new Error(\n        `No Viewport Component available for name ${pluginName}.\n         Available plugins: ${JSON.stringify(availablePlugins)}`\n      );\n    }\n\n    return (\n      <ViewportComponent\n        viewportData={viewportData}\n        viewportIndex={viewportIndex}\n        children={[children]}\n      />\n    );\n  }\n\n  return <EmptyViewport />;\n}\n\nexport default ViewportGrid;\n","/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultViewport(props) {\n  return <div>{JSON.stringify(props)}</div>;\n}\n","import ViewportGrid from './ViewportGrid.js';\nimport { MODULE_TYPES } from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { extensionManager } from './../../App.js';\nimport memoize from 'lodash/memoize';\n\nconst getAvailableViewportModules = memoize(viewportModules => {\n  const availableViewportModules = {};\n  viewportModules.forEach(moduleDefinition => {\n    availableViewportModules[moduleDefinition.extensionId] =\n      moduleDefinition.module;\n  });\n  return availableViewportModules;\n});\n\nconst mapStateToProps = state => {\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\n\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\n  let defaultPlugin;\n  if (viewportModules.length) {\n    defaultPlugin = viewportModules[0].extensionId;\n  }\n\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\n\n  return {\n    numRows,\n    numColumns,\n    layout,\n    activeViewportIndex,\n    // TODO: rename `availableViewportModules`\n    availablePlugins: availableViewportModules,\n    // TODO: rename `defaultViewportModule`\n    defaultPlugin,\n  };\n};\n\nconst ConnectedViewportGrid = connect(\n  mapStateToProps,\n  null\n)(ViewportGrid);\n\nexport default ConnectedViewportGrid;\n","import './ViewerMain.css';\n\nimport { Component } from 'react';\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport memoize from 'lodash/memoize';\nimport _values from 'lodash/values';\n\nvar values = memoize(_values);\n\nclass ViewerMain extends Component {\n  static propTypes = {\n    activeViewportIndex: PropTypes.number.isRequired,\n    studies: PropTypes.array,\n    viewportSpecificData: PropTypes.object.isRequired,\n    layout: PropTypes.object.isRequired,\n    setViewportSpecificData: PropTypes.func.isRequired,\n    clearViewportSpecificData: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displaySets: [],\n    };\n  }\n\n  getDisplaySets(studies) {\n    const displaySets = [];\n    studies.forEach(study => {\n      study.displaySets.forEach(dSet => {\n        if (!dSet.plugin) {\n          dSet.plugin = 'cornerstone';\n        }\n        displaySets.push(dSet);\n      });\n    });\n\n    return displaySets;\n  }\n\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\n    const study = studies.find(study => {\n      return study.StudyInstanceUID === StudyInstanceUID;\n    });\n\n    if (!study) {\n      return;\n    }\n\n    return study.displaySets.find(displaySet => {\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\n    });\n  }\n\n  componentDidMount() {\n    // Add beforeUnload event handler to check for unsaved changes\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\n\n    // Get all the display sets for the viewer studies\n    if (this.props.studies) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevViewportAmount = prevProps.layout.viewports.length;\n    const viewportAmount = this.props.layout.viewports.length;\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\n\n    if (\n      this.props.studies !== prevProps.studies ||\n      (viewportAmount !== prevViewportAmount && !isVtk)\n    ) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  fillEmptyViewportPanes = () => {\n    // TODO: Here is the entry point for filling viewports on load.\n    const dirtyViewportPanes = [];\n    const { layout, viewportSpecificData } = this.props;\n    const { displaySets } = this.state;\n\n    if (!displaySets || !displaySets.length) {\n      return;\n    }\n\n    for (let i = 0; i < layout.viewports.length; i++) {\n      const viewportPane = viewportSpecificData[i];\n      const isNonEmptyViewport =\n        viewportPane &&\n        viewportPane.StudyInstanceUID &&\n        viewportPane.displaySetInstanceUID;\n\n      if (isNonEmptyViewport) {\n        dirtyViewportPanes.push({\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\n        });\n\n        continue;\n      }\n\n      const foundDisplaySet =\n        displaySets.find(\n          ds =>\n            !dirtyViewportPanes.some(\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\n            )\n        ) || displaySets[displaySets.length - 1];\n\n      dirtyViewportPanes.push(foundDisplaySet);\n    }\n\n    dirtyViewportPanes.forEach((vp, i) => {\n      if (vp && vp.StudyInstanceUID) {\n        this.setViewportData({\n          viewportIndex: i,\n          StudyInstanceUID: vp.StudyInstanceUID,\n          displaySetInstanceUID: vp.displaySetInstanceUID,\n        });\n      }\n    });\n  };\n\n  setViewportData = ({\n    viewportIndex,\n    StudyInstanceUID,\n    displaySetInstanceUID,\n  }) => {\n    let displaySet = this.findDisplaySet(\n      this.props.studies,\n      StudyInstanceUID,\n      displaySetInstanceUID\n    );\n\n    if (displaySet.isDerived) {\n      const { Modality } = displaySet;\n      displaySet = displaySet.getSourceDisplaySet(this.props.studies);\n\n      if (!displaySet) {\n        throw new Error(\n          `Referenced series for ${Modality} dataset not present.`\n        );\n      }\n    }\n\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\n  };\n\n  render() {\n    const { viewportSpecificData } = this.props;\n    const viewportData = values(viewportSpecificData);\n\n    return (\n      <div className=\"ViewerMain\">\n        {this.state.displaySets.length && (\n          <ConnectedViewportGrid\n            isStudyLoaded={this.props.isStudyLoaded}\n            studies={this.props.studies}\n            viewportData={viewportData}\n            setViewportData={this.setViewportData}\n          >\n            {/* Children to add to each viewport that support children */}\n          </ConnectedViewportGrid>\n        )}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // Clear the entire viewport specific data\n    const { viewportSpecificData } = this.props;\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\n      this.props.clearViewportSpecificData(viewportIndex);\n    });\n\n    // TODO: These don't have to be viewer specific?\n    // Could qualify for other routes?\n    // hotkeys.destroy();\n\n    // Remove beforeUnload event handler...\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\n    // Destroy the synchronizer used to update reference lines\n    //OHIF.viewer.updateImageSynchronizer.destroy();\n    // TODO: Instruct all plugins to clean up themselves\n    //\n    // Clear references to all stacks in the StackManager\n    //StackManager.clearStacks();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.Studies collection\n    //OHIF.viewer.Studies.removeAll();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.StudyMetadataList collection\n    //OHIF.viewer.StudyMetadataList.removeAll();\n  }\n}\n\nexport default ViewerMain;\n","import OHIF from '@ohif/core';\nimport ViewerMain from './ViewerMain';\nimport { connect } from 'react-redux';\n\nconst {\n  setViewportSpecificData,\n  clearViewportSpecificData,\n} = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\n\n  return {\n    activeViewportIndex,\n    layout,\n    viewportSpecificData,\n    viewports: state.viewports,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    },\n  };\n};\n\nconst ConnectedViewerMain = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerMain);\n\nexport default ConnectedViewerMain;\n","import './SidePanel.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst SidePanel = ({ from, isOpen, children, width }) => {\n  const fromSideClass = from === 'right' ? 'from-right' : 'from-left';\n\n  const styles = width\n    ? {\n        maxWidth: width,\n        marginRight: isOpen ? '0' : Number.parseInt(width) * -1,\n      }\n    : {};\n\n  return (\n    <section\n      style={styles}\n      className={classNames('sidepanel', fromSideClass, {\n        'is-open': isOpen,\n      })}\n    >\n      {children}\n    </section>\n  );\n};\n\nSidePanel.propTypes = {\n  from: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  children: PropTypes.node,\n  width: PropTypes.string,\n};\n\nexport default SidePanel;\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { ErrorBoundary, Icon } from '@ohif/ui';\nimport { servicesManager } from './../../App';\n\nimport './ErrorBoundaryDialog.css';\n\nconst { UIModalService } = servicesManager.services;\n\nconst ErrorBoundaryDialog = ({ context, children }) => {\n  const handleOnError = (error, componentStack) => {\n    const ErrorDialog = () => {\n      const [open, setOpen] = useState(false);\n\n      return (\n        <div className=\"ErrorFallback\" role=\"alert\">\n          <div className=\"ErrorBoundaryDialog\">\n            <h3 className=\"ErrorBoundaryDialogTitle\">\n              {context}: <span>{error.message}</span>\n            </h3>\n          </div>\n          <button\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\n            onClick={() => setOpen(s => !s)}\n          >\n            <Icon\n              name=\"chevron-down\"\n              className={classnames('ErrorBoundaryDialogIcon', {\n                opened: open,\n              })}\n            />\n            Stack Trace\n          </button>\n\n          {open && <pre>{componentStack}</pre>}\n        </div>\n      );\n    };\n\n    UIModalService.show({\n      content: ErrorDialog,\n      title: `Something went wrong in ${context}`,\n    });\n  };\n\n  const fallbackComponent = () => (\n    <div className=\"ErrorFallback\" role=\"alert\">\n      <p>\n        Error rendering {context}. <br /> Check the browser console for more\n        details.\n      </p>\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      fallbackComponent={fallbackComponent}\n      context={context}\n      onError={handleOnError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nErrorBoundaryDialog.propTypes = {\n  context: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErrorBoundaryDialog;\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\n\nexport default ErrorBoundaryDialog;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\nimport { withDialog } from '@ohif/ui';\nimport moment from 'moment';\nimport ConnectedHeader from './ConnectedHeader.js';\nimport ToolbarRow from './ToolbarRow.js';\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\nimport SidePanel from './../components/SidePanel.js';\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\nimport { extensionManager } from './../App.js';\nimport { ReconstructionIssues } from './../../../core/src/enums.js';\n\n// Contexts\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\nimport UserManagerContext from '../context/UserManagerContext';\nimport AppContext from '../context/AppContext';\n\nimport './Viewer.css';\nimport { finished } from 'stream';\n\nclass Viewer extends Component {\n  static propTypes = {\n    studies: PropTypes.arrayOf(\n      PropTypes.shape({\n        StudyInstanceUID: PropTypes.string.isRequired,\n        StudyDate: PropTypes.string,\n        PatientID: PropTypes.string,\n        displaySets: PropTypes.arrayOf(\n          PropTypes.shape({\n            displaySetInstanceUID: PropTypes.string.isRequired,\n            SeriesDescription: PropTypes.string,\n            SeriesNumber: PropTypes.number,\n            InstanceNumber: PropTypes.number,\n            numImageFrames: PropTypes.number,\n            Modality: PropTypes.string.isRequired,\n            images: PropTypes.arrayOf(\n              PropTypes.shape({\n                getImageId: PropTypes.func.isRequired,\n              })\n            ),\n          })\n        ),\n      })\n    ),\n    studyInstanceUIDs: PropTypes.array,\n    activeServer: PropTypes.shape({\n      type: PropTypes.string,\n      wadoRoot: PropTypes.string,\n    }),\n    onTimepointsUpdated: PropTypes.func,\n    onMeasurementsUpdated: PropTypes.func,\n    // window.store.getState().viewports.viewportSpecificData\n    viewports: PropTypes.object.isRequired,\n    // window.store.getState().viewports.activeViewportIndex\n    activeViewportIndex: PropTypes.number.isRequired,\n    isStudyLoaded: PropTypes.bool,\n    dialog: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { activeServer } = this.props;\n    const server = Object.assign({}, activeServer);\n\n    OHIF.measurements.MeasurementApi.setConfiguration({\n      dataExchange: {\n        retrieve: DICOMSR.retrieveMeasurements,\n        store: DICOMSR.storeMeasurements,\n      },\n      server,\n    });\n\n    OHIF.measurements.TimepointApi.setConfiguration({\n      dataExchange: {\n        retrieve: this.retrieveTimepoints,\n        store: this.storeTimepoints,\n        remove: this.removeTimepoint,\n        update: this.updateTimepoint,\n        disassociate: this.disassociateStudy,\n      },\n    });\n\n    this._getActiveViewport = this._getActiveViewport.bind(this);\n  }\n\n  state = {\n    isLeftSidePanelOpen: true,\n    isRightSidePanelOpen: false,\n    selectedRightSidePanel: '',\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\n    thumbnails: [],\n  };\n\n  componentWillUnmount() {\n    if (this.props.dialog) {\n      this.props.dialog.dismissAll();\n    }\n  }\n\n  retrieveTimepoints = filter => {\n    OHIF.log.info('retrieveTimepoints');\n\n    // Get the earliest and latest study date\n    let earliestDate = new Date().toISOString();\n    let latestDate = new Date().toISOString();\n    if (this.props.studies) {\n      latestDate = new Date('1000-01-01').toISOString();\n      this.props.studies.forEach(study => {\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\n        if (StudyDate < earliestDate) {\n          earliestDate = StudyDate;\n        }\n        if (StudyDate > latestDate) {\n          latestDate = StudyDate;\n        }\n      });\n    }\n\n    // Return a generic timepoint\n    return Promise.resolve([\n      {\n        timepointType: 'baseline',\n        timepointId: 'TimepointId',\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\n        PatientID: filter.PatientID,\n        earliestDate,\n        latestDate,\n        isLocked: false,\n      },\n    ]);\n  };\n\n  storeTimepoints = timepointData => {\n    OHIF.log.info('storeTimepoints');\n    return Promise.resolve();\n  };\n\n  updateTimepoint = (timepointData, query) => {\n    OHIF.log.info('updateTimepoint');\n    return Promise.resolve();\n  };\n\n  removeTimepoint = timepointId => {\n    OHIF.log.info('removeTimepoint');\n    return Promise.resolve();\n  };\n\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\n    OHIF.log.info('disassociateStudy');\n    return Promise.resolve();\n  };\n\n  onTimepointsUpdated = timepoints => {\n    if (this.props.onTimepointsUpdated) {\n      this.props.onTimepointsUpdated(timepoints);\n    }\n  };\n\n  onMeasurementsUpdated = measurements => {\n    if (this.props.onMeasurementsUpdated) {\n      this.props.onMeasurementsUpdated(measurements);\n    }\n  };\n\n  componentDidMount() {\n    const { studies, isStudyLoaded } = this.props;\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\n    const currentTimepointId = 'TimepointId';\n\n    const timepointApi = new TimepointApi(currentTimepointId, {\n      onTimepointsUpdated: this.onTimepointsUpdated,\n    });\n\n    const measurementApi = new MeasurementApi(timepointApi, {\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\n    });\n\n    this.currentTimepointId = currentTimepointId;\n    this.timepointApi = timepointApi;\n    this.measurementApi = measurementApi;\n\n    if (studies) {\n      const PatientID = studies[0] && studies[0].PatientID;\n\n      timepointApi.retrieveTimepoints({ PatientID });\n      if (isStudyLoaded) {\n        this.measurementApi.retrieveMeasurements(PatientID, [\n          currentTimepointId,\n        ]);\n      }\n\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(studies),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { studies, isStudyLoaded } = this.props;\n\n    if (studies !== prevProps.studies) {\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(studies),\n      });\n    }\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\n      const PatientID = studies[0] && studies[0].PatientID;\n      const { currentTimepointId } = this;\n\n      this.timepointApi.retrieveTimepoints({ PatientID });\n      this.measurementApi.retrieveMeasurements(PatientID, [currentTimepointId]);\n    }\n  }\n\n  _getActiveViewport() {\n    return this.props.viewports[this.props.activeViewportIndex];\n  }\n\n  render() {\n    let VisiblePanelLeft, VisiblePanelRight;\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    panelExtensions.forEach(panelExt => {\n      panelExt.module.components.forEach(comp => {\n        if (comp.id === this.state.selectedRightSidePanel) {\n          VisiblePanelRight = comp.component;\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\n          VisiblePanelLeft = comp.component;\n        }\n      });\n    });\n\n    return (\n      <>\n        {/* HEADER */}\n        <WhiteLabelingContext.Consumer>\n          {whiteLabeling => (\n            <UserManagerContext.Consumer>\n              {userManager => (\n                <AppContext.Consumer>\n                  {appContext => (\n                    <ConnectedHeader\n                      linkText={\n                        appContext.appConfig.showStudyList\n                          ? 'Study List'\n                          : undefined\n                      }\n                      linkPath={\n                        appContext.appConfig.showStudyList ? '/' : undefined\n                      }\n                      userManager={userManager}\n                    >\n                      {whiteLabeling &&\n                        whiteLabeling.createLogoComponentFn &&\n                        whiteLabeling.createLogoComponentFn(React)}\n                    </ConnectedHeader>\n                  )}\n                </AppContext.Consumer>\n              )}\n            </UserManagerContext.Consumer>\n          )}\n        </WhiteLabelingContext.Consumer>\n\n        {/* TOOLBAR */}\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\n          <ToolbarRow\n            activeViewport={\n              this.props.viewports[this.props.activeViewportIndex]\n            }\n            isDerivedDisplaySetsLoaded={this.props.isDerivedDisplaySetsLoaded}\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\n            selectedLeftSidePanel={\n              this.state.isLeftSidePanelOpen\n                ? this.state.selectedLeftSidePanel\n                : ''\n            }\n            selectedRightSidePanel={\n              this.state.isRightSidePanelOpen\n                ? this.state.selectedRightSidePanel\n                : ''\n            }\n            handleSidePanelChange={(side, selectedPanel) => {\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\n              const openKey = `is${sideClicked}SidePanelOpen`;\n              const selectedKey = `selected${sideClicked}SidePanel`;\n              const updatedState = Object.assign({}, this.state);\n\n              const isOpen = updatedState[openKey];\n              const prevSelectedPanel = updatedState[selectedKey];\n              // RoundedButtonGroup returns `null` if selected button is clicked\n              const isSameSelectedPanel =\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\n\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\n\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\n              if (isClosedOrShouldClose) {\n                updatedState[openKey] = !updatedState[openKey];\n              }\n\n              this.setState(updatedState);\n            }}\n            studies={this.props.studies}\n          />\n        </ErrorBoundaryDialog>\n\n        {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\n        {/*<StudyPrefetcher studies={this.props.studies} />*/}\n\n        {/* VIEWPORTS + SIDEPANELS */}\n        <div className=\"FlexboxLayout\">\n          {/* LEFT */}\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\n              {VisiblePanelLeft ? (\n                <VisiblePanelLeft\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                />\n              ) : (\n                <ConnectedStudyBrowser\n                  studies={this.state.thumbnails}\n                  studyMetadata={this.props.studies}\n                />\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n\n          {/* MAIN */}\n          <div className={classNames('main-content')}>\n            <ErrorBoundaryDialog context=\"ViewerMain\">\n              <ConnectedViewerMain\n                studies={this.props.studies}\n                isStudyLoaded={this.props.isStudyLoaded}\n              />\n            </ErrorBoundaryDialog>\n          </div>\n\n          {/* RIGHT */}\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\n              {VisiblePanelRight && (\n                <VisiblePanelRight\n                  isOpen={this.state.isRightSidePanelOpen}\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                  activeViewport={\n                    this.props.viewports[this.props.activeViewportIndex]\n                  }\n                  getActiveViewport={this._getActiveViewport}\n                />\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withDialog(Viewer);\n\n/**\n * Async function to check if there are any inconsistences in the series\n * (i.e. reconstructable to a 3D volume). If not reconstructable MPR is disabled.\n * The actual computations are done in isDisplaySetReconstructable.\n *\n * 1) Is series multiframe?\n * 2) Do the frames have different dimensions/numer of components/orientations?\n * 3) Has the series any missing frames or irregular spacing?\n * 4) Is the series 4D?\n *\n * @param {*object} displaySet\n * @returns {[string]} an array of strings containing the warnings\n */\nconst _checkForSeriesInconsistencesWarnings = async function (displaySet) {\n  // NOTE: at the moment this function is async even if it does not perfom any heavy calculation.\n  //       We may add or move here some of the computations\n  //       done when creating the displaySet (see makeDisplaySet and isDisplaySetReconstructable).\n  //       the thumbnail footnotes warning react element is already set up to handle a promise.\n  const warningsList = [];\n  if (displaySet.warningIssues && displaySet.warningIssues.length !== 0) {\n    displaySet.warningIssues.forEach(warning => {\n      switch (warning) {\n        case ReconstructionIssues.DATASET_4D:\n          warningsList.push(\"The dataset is 4D.\");\n          break;\n        case ReconstructionIssues.VARYING_IMAGESDIMENSIONS:\n          warningsList.push(\"The dataset frames have different dimensions (rows, columns).\");\n          break;\n        case ReconstructionIssues.VARYING_IMAGESCOMPONENTS:\n          warningsList.push(\"The dataset frames have different components (Sample per pixel).\");\n          break;\n        case ReconstructionIssues.VARYING_IMAGESORIENTATION:\n          warningsList.push(\"The dataset frames have different orientation.\");\n          break;\n        case ReconstructionIssues.IRREGULAR_SPACING:\n          warningsList.push(\"The dataset frames have different pixel spacing.\");\n          break;\n        case ReconstructionIssues.MULTIFFRAMES:\n          warningsList.push(\"The dataset is a multiframes.\");\n          break;\n        default:\n          break;\n      }\n    });\n      warningsList.push('The datasets is not a reconstructable 3D volume. MPR mode is not available.');\n  }\n\n  if (displaySet.missingFrames &&\n    (!displaySet.warningIssues ||\n      (displaySet.warningIssues && !displaySet.warningIssues.find(warn => warn === ReconstructionIssues.DATASET_4D)))) {\n    warningsList.push('The datasets is missing frames: ' + displaySet.missingFrames + '.');\n  }\n\n  return warningsList\n}\n\n/**\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\n * a mapping layer?\n *\n * TODO[react]:\n * - Add showStackLoadingProgressBar option\n *\n * @param {Study[]} studies\n * @param {DisplaySet[]} studies[].displaySets\n */\nconst _mapStudiesToThumbnails = function(studies) {\n  return studies.map(study => {\n    const { StudyInstanceUID } = study;\n\n    const thumbnails = study.displaySets.map(displaySet => {\n      const {\n        displaySetInstanceUID,\n        SeriesDescription,\n        InstanceNumber,\n        numImageFrames,\n        SeriesNumber,\n      } = displaySet;\n\n      let imageId;\n      let altImageText;\n\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\n        // TODO: We want to replace this with a thumbnail showing\n        // the segmentation map on the image, but this is easier\n        // and better than what we have right now.\n        altImageText = 'SEG';\n      } else if (displaySet.images && displaySet.images.length) {\n        const imageIndex = Math.floor(displaySet.images.length / 2);\n\n        imageId = displaySet.images[imageIndex].getImageId();\n      } else {\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\n      }\n\n      const hasWarnings = _checkForSeriesInconsistencesWarnings(displaySet)\n\n      return {\n        imageId,\n        altImageText,\n        displaySetInstanceUID,\n        SeriesDescription,\n        InstanceNumber,\n        numImageFrames,\n        SeriesNumber,\n        hasWarnings,\n      };\n    });\n\n    return {\n      StudyInstanceUID,\n      thumbnails,\n    };\n  });\n};\n","import { connect } from 'react-redux';\nimport Viewer from './Viewer.js';\nimport OHIF from '@ohif/core';\n\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n  return servers.servers.find(isActive);\n};\n\nconst mapStateToProps = state => {\n  const { viewports, servers } = state;\n  return {\n    viewports: viewports.viewportSpecificData,\n    activeViewportIndex: viewports.activeViewportIndex,\n    activeServer: getActiveServer(servers),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTimepointsUpdated: timepoints => {\n      dispatch(setTimepoints(timepoints));\n    },\n    onMeasurementsUpdated: measurements => {\n      dispatch(setMeasurements(measurements));\n    },\n  };\n};\n\nconst ConnectedViewer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Viewer);\n\nexport default ConnectedViewer;\n","const range = (start, end) => {\n  return new Array(end - start).fill().map((d, i) => i + start);\n};\n\nexport const MODIFIER_KEYS = ['ctrl', 'alt', 'shift'];\n\nexport const DISALLOWED_COMBINATIONS = {\n  '': [],\n  alt: ['space'],\n  shift: [],\n  ctrl: [\n    'f4',\n    'f5',\n    'f11',\n    'w',\n    'r',\n    't',\n    'o',\n    'p',\n    'a',\n    'd',\n    'f',\n    'g',\n    'h',\n    'j',\n    'l',\n    'z',\n    'x',\n    'c',\n    'v',\n    'b',\n    'n',\n    'pagedown',\n    'pageup',\n  ],\n  'ctrl+shift': ['q', 'w', 'r', 't', 'p', 'a', 'h', 'v', 'b', 'n'],\n};\n\nexport const SPECIAL_KEYS = {\n  8: 'backspace',\n  9: 'tab',\n  13: 'return',\n  16: 'shift',\n  17: 'ctrl',\n  18: 'alt',\n  19: 'pause',\n  20: 'capslock',\n  27: 'esc',\n  32: 'space',\n  33: 'pageup',\n  34: 'pagedown',\n  35: 'end',\n  36: 'home',\n  37: 'left',\n  38: 'up',\n  39: 'right',\n  40: 'down',\n  45: 'insert',\n  46: 'del',\n  96: '0',\n  97: '1',\n  98: '2',\n  99: '3',\n  100: '4',\n  101: '5',\n  102: '6',\n  103: '7',\n  104: '8',\n  105: '9',\n  106: '*',\n  107: '+',\n  109: '-',\n  110: '.',\n  111: '/',\n  112: 'f1',\n  113: 'f2',\n  114: 'f3',\n  115: 'f4',\n  116: 'f5',\n  117: 'f6',\n  118: 'f7',\n  119: 'f8',\n  120: 'f9',\n  121: 'f10',\n  122: 'f11',\n  123: 'f12',\n  144: 'numlock',\n  145: 'scroll',\n  191: '/',\n  224: 'meta',\n};\n","import { MODIFIER_KEYS, DISALLOWED_COMBINATIONS } from './hotkeysConfig';\n\nconst formatPressedKeys = pressedKeysArray => pressedKeysArray.join('+');\n\nconst findConflictingCommand = (hotkeys, currentCommandName, pressedKeys) => {\n  let firstConflictingCommand = undefined;\n  const formatedPressedHotkeys = formatPressedKeys(pressedKeys);\n\n  for (const commandName in hotkeys) {\n    const toolHotkeys = hotkeys[commandName].keys;\n    const formatedToolHotkeys = formatPressedKeys(toolHotkeys);\n\n    if (\n      formatedPressedHotkeys === formatedToolHotkeys &&\n      commandName !== currentCommandName\n    ) {\n      firstConflictingCommand = hotkeys[commandName];\n      break;\n    }\n  }\n\n  return firstConflictingCommand;\n};\n\nconst ERROR_MESSAGES = {\n  MODIFIER:\n    \"It's not possible to define only modifier keys (ctrl, alt and shift) as a shortcut\",\n  EMPTY: \"Field can't be empty.\",\n};\n\n// VALIDATORS\n\nconst modifierValidator = ({ pressedKeys }) => {\n  const lastPressedKey = pressedKeys[pressedKeys.length - 1];\n  // Check if it has a valid modifier\n  const isModifier = MODIFIER_KEYS.includes(lastPressedKey);\n  if (isModifier) {\n    return {\n      hasError: true,\n      errorMessage: ERROR_MESSAGES.MODIFIER,\n    };\n  }\n};\n\nconst emptyValidator = ({ pressedKeys = [] }) => {\n  if (!pressedKeys.length) {\n    return {\n      hasError: true,\n      errorMessage: ERROR_MESSAGES.EMPTY,\n    };\n  }\n};\n\nconst conflictingValidator = ({ commandName, pressedKeys, hotkeys }) => {\n  const conflictingCommand = findConflictingCommand(\n    hotkeys,\n    commandName,\n    pressedKeys\n  );\n\n  if (conflictingCommand) {\n    return {\n      hasError: true,\n      errorMessage: `\"${conflictingCommand.label}\" is already using the \"${pressedKeys}\" shortcut.`,\n    };\n  }\n};\n\nconst disallowedValidator = ({ pressedKeys = [] }) => {\n  const lastPressedKey = pressedKeys[pressedKeys.length - 1];\n  const modifierCommand = formatPressedKeys(\n    pressedKeys.slice(0, pressedKeys.length - 1)\n  );\n\n  const disallowedCombination = DISALLOWED_COMBINATIONS[modifierCommand];\n  const hasDisallowedCombinations = disallowedCombination\n    ? disallowedCombination.includes(lastPressedKey)\n    : false;\n\n  if (hasDisallowedCombinations) {\n    return {\n      hasError: true,\n      errorMessage: `\"${formatPressedKeys(\n        pressedKeys\n      )}\" shortcut combination is not allowed`,\n    };\n  }\n};\n\nconst hotkeysValidators = [\n  emptyValidator,\n  modifierValidator,\n  conflictingValidator,\n  disallowedValidator,\n];\n\nexport { hotkeysValidators };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport { useSnackbarContext, TabFooter, HotkeyField } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\n\nimport { hotkeysValidators } from './hotkeysValidators';\nimport { MODIFIER_KEYS } from './hotkeysConfig';\n\nimport { hotkeysManager } from '../../App';\n\nimport './HotkeysPreferences.styl';\n/**\n * Take hotkeyDefenintions and build an initialState to be used into the component state\n *\n * @param {Object} hotkeyDefinitions\n * @returns {Object} initialState\n */\nconst initialState = hotkeyDefinitions => ({\n  hotkeys: { ...hotkeyDefinitions },\n  errors: {},\n});\n/**\n * Take the updated command and keys and validate the changes with all validators\n *\n * @param {Object} arguments\n * @param {string} arguments.commandName command name string to be updated\n * @param {array} arguments.pressedKeys new array of keys to be added for the commandName\n * @param {array} arguments.hotkeys all hotkeys currently into the app\n * @returns {Object} {errorMessage} errorMessage coming from any of the validator or undefined if none\n */\nconst validateCommandKey = ({ commandName, pressedKeys, hotkeys }) => {\n  for (const validator of hotkeysValidators) {\n    const validation = validator({\n      commandName,\n      pressedKeys,\n      hotkeys,\n    });\n    if (validation && validation.hasError) {\n      return validation;\n    }\n  }\n\n  return {\n    errorMessage: undefined,\n  };\n};\n\n/**\n * Take all hotkeys and split the list into two lists\n *\n * @param {array} hotkeys list of all hotkeys\n * @returns {array} array containing two arrays of keys\n */\nconst splitHotkeys = hotkeys => {\n  const splitedHotkeys = [];\n  const arrayHotkeys = Object.entries(hotkeys);\n\n  if (arrayHotkeys.length) {\n    const halfwayThrough = Math.ceil(arrayHotkeys.length / 2);\n    splitedHotkeys.push(arrayHotkeys.slice(0, halfwayThrough));\n    splitedHotkeys.push(\n      arrayHotkeys.slice(halfwayThrough, arrayHotkeys.length)\n    );\n  }\n\n  return splitedHotkeys;\n};\n\n/**\n * HotkeysPreferences tab\n * It renders all hotkeys displayed into columns/rows\n *\n * It stores current state and whenever it changes, component messages parent of new value (through function callback)\n * @param {object} props component props\n * @param {string} props.onClose\n */\nfunction HotkeysPreferences({ onClose }) {\n  const { t } = useTranslation('UserPreferencesModal');\n  const { hotkeyDefaults, hotkeyDefinitions } = hotkeysManager;\n\n  const [state, setState] = useState(initialState(hotkeyDefinitions));\n\n  const snackbar = useSnackbarContext();\n\n  const onResetPreferences = () => {\n    const defaultHotKeyDefinitions = {};\n\n    hotkeyDefaults.map(item => {\n      const { commandName, ...values } = item;\n      defaultHotKeyDefinitions[commandName] = { ...values };\n    });\n\n    setState(initialState(defaultHotKeyDefinitions));\n  };\n\n  const onSave = () => {\n    const { hotkeys } = state;\n\n    hotkeysManager.setHotkeys(hotkeys);\n\n    localStorage.setItem('hotkey-definitions', JSON.stringify(hotkeys));\n\n    onClose();\n\n    snackbar.show({\n      message: t('SaveMessage'),\n      type: 'success',\n    });\n  };\n\n  const onHotkeyChanged = (commandName, hotkeyDefinition, keys) => {\n    const { errorMessage } = validateCommandKey({\n      commandName,\n      pressedKeys: keys,\n      hotkeys: state.hotkeys,\n    });\n\n    setState(prevState => ({\n      hotkeys: {\n        ...prevState.hotkeys,\n        [commandName]: { ...hotkeyDefinition, keys },\n      },\n      errors: {\n        ...prevState.errors,\n        [commandName]: errorMessage,\n      },\n    }));\n  };\n\n  const hasErrors = Object.keys(state.errors).some(key => !!state.errors[key]);\n  const hasHotkeys = Object.keys(state.hotkeys).length;\n  const splitedHotkeys = splitHotkeys(state.hotkeys);\n\n  return (\n    <React.Fragment>\n      <div className=\"HotkeysPreferences\">\n        {hasHotkeys ? (\n          <div className=\"hotkeyTable\">\n            {splitedHotkeys.map((hotkeys, index) => {\n              return (\n                <div className=\"hotkeyColumn\" key={index}>\n                  <div className=\"hotkeyHeader\">\n                    <div className=\"headerItemText text-right\">Function</div>\n                    <div className=\"headerItemText text-center\">Shortcut</div>\n                  </div>\n                  {hotkeys.map(hotkey => {\n                    const commandName = hotkey[0];\n                    const hotkeyDefinition = hotkey[1];\n                    const { keys, label } = hotkeyDefinition;\n                    const errorMessage = state.errors[hotkey[0]];\n                    const handleChange = keys => {\n                      onHotkeyChanged(commandName, hotkeyDefinition, keys);\n                    };\n\n                    return (\n                      <div key={commandName} className=\"hotkeyRow\">\n                        <div className=\"hotkeyLabel\">{label}</div>\n                        <div\n                          data-key=\"defaultTool\"\n                          className={classnames(\n                            'wrapperHotkeyInput',\n                            errorMessage ? 'stateError' : ''\n                          )}\n                        >\n                          <HotkeyField\n                            keys={keys}\n                            modifier_keys={MODIFIER_KEYS}\n                            handleChange={handleChange}\n                            classNames={'preferencesInput'}\n                          ></HotkeyField>\n                          <span className=\"preferencesInputErrorMessage\">\n                            {errorMessage}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          'Hotkeys definitions is empty'\n        )}\n      </div>\n      <TabFooter\n        onResetPreferences={onResetPreferences}\n        onSave={onSave}\n        onCancel={onClose}\n        hasErrors={hasErrors}\n        t={t}\n      />\n    </React.Fragment>\n  );\n}\n\nHotkeysPreferences.propTypes = {\n  onClose: PropTypes.func,\n};\n\nexport { HotkeysPreferences };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { redux } from '@ohif/core';\n\nimport { TabFooter, useSnackbarContext } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\n\nconst { actions } = redux;\n\nimport './WindowLevelPreferences.styl';\n\nfunction WindowLevelPreferences({ onClose }) {\n  const dispatch = useDispatch();\n\n  const windowLevelData = useSelector(state => {\n    const { preferences = {} } = state;\n    const { windowLevelData } = preferences;\n\n    return windowLevelData;\n  });\n\n  const [state, setState] = useState({\n    values: { ...windowLevelData },\n  });\n\n  const { t } = useTranslation('UserPreferencesModal');\n  const onResetPreferences = () => {};\n  const hasErrors = false;\n  const onSave = () => {\n    dispatch(actions.setUserPreferences({ windowLevelData: state.values }));\n\n    onClose();\n\n    snackbar.show({\n      message: t('SaveMessage'),\n      type: 'success',\n    });\n  };\n\n  const snackbar = useSnackbarContext();\n\n  const handleInputChange = event => {\n    const $target = event.target;\n    const { key, inputname } = $target.dataset;\n    const inputValue = $target.value;\n\n    if (!state.values[key] || !state.values[key][inputname]) {\n      return;\n    }\n\n    setState(prevState => ({\n      ...prevState,\n      values: {\n        ...prevState.values,\n        [key]: {\n          ...prevState.values[key],\n          [inputname]: inputValue,\n        },\n      },\n    }));\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"WindowLevelPreferences\">\n        <div className=\"wlColumn\">\n          <div className=\"wlRow header\">\n            <div className=\"wlColumn preset\">Preset</div>\n            <div className=\"wlColumn description\">Description</div>\n            <div className=\"wlColumn window\">Window</div>\n            <div className=\"wlColumn level\">Level</div>\n          </div>\n          {Object.keys(state.values).map((key, index) => {\n            return (\n              <div className=\"wlRow\" key={key}>\n                <div className=\"wlColumn preset\">{key}</div>\n                <div className=\"wlColumn description\">\n                  <input\n                    type=\"text\"\n                    className=\"preferencesInput\"\n                    value={state.values[key].description}\n                    data-key={key}\n                    data-inputname=\"description\"\n                    onChange={handleInputChange}\n                  />\n                </div>\n                <div className=\"wlColumn window\">\n                  <input\n                    type=\"number\"\n                    className=\"preferencesInput\"\n                    value={state.values[key].window}\n                    data-key={key}\n                    data-inputname=\"window\"\n                    onChange={handleInputChange}\n                  />\n                </div>\n                <div className=\"wlColumn level\">\n                  <input\n                    type=\"number\"\n                    className=\"preferencesInput\"\n                    value={state.values[key].level}\n                    data-key={key}\n                    data-inputname=\"level\"\n                    onChange={handleInputChange}\n                  />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <TabFooter\n        onResetPreferences={onResetPreferences}\n        onSave={onSave}\n        onCancel={onClose}\n        hasErrors={hasErrors}\n        t={t}\n      />\n    </React.Fragment>\n  );\n}\n\nWindowLevelPreferences.propTypes = {\n  onClose: PropTypes.func,\n};\n\nexport { WindowLevelPreferences };\n","import React, { useState, useSelector } from 'react';\nimport PropTypes from 'prop-types';\n\nimport i18n from '@ohif/i18n';\n\nimport { TabFooter, LanguageSwitcher, useSnackbarContext } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\n\nimport './GeneralPreferences.styl';\n\n/**\n * General Preferences tab\n * It renders the General Preferences content\n *\n * @param {object} props component props\n * @param {function} props.onClose\n */\nfunction GeneralPreferences({ onClose }) {\n  const { t } = useTranslation('UserPreferencesModal');\n  const snackbar = useSnackbarContext();\n  const currentLanguage = i18n.language;\n  const { availableLanguages } = i18n;\n\n  const [language, setLanguage] = useState(currentLanguage);\n\n  const onResetPreferences = () => {\n    setLanguage(i18n.defaultLanguage);\n  };\n\n  const onSave = () => {\n    i18n.changeLanguage(language);\n\n    onClose();\n\n    snackbar.show({\n      message: t('SaveMessage'),\n      type: 'success',\n    });\n  };\n\n  const hasErrors = false;\n\n  return (\n    <React.Fragment>\n      <div className=\"GeneralPreferences\">\n        <div className=\"language\">\n          <label htmlFor=\"language-select\" className=\"languageLabel\">\n            Language\n          </label>\n          <LanguageSwitcher\n            language={language}\n            onLanguageChange={setLanguage}\n            languages={availableLanguages}\n          />\n        </div>\n      </div>\n      <TabFooter\n        onResetPreferences={onResetPreferences}\n        onSave={onSave}\n        onCancel={onClose}\n        hasErrors={hasErrors}\n        t={t}\n      />\n    </React.Fragment>\n  );\n}\n\nGeneralPreferences.propTypes = {\n  onClose: PropTypes.func,\n};\n\nexport { GeneralPreferences };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TabComponents } from '@ohif/ui';\n\n// Tabs\nimport { HotkeysPreferences } from './HotkeysPreferences';\nimport { WindowLevelPreferences } from './WindowLevelPreferences';\nimport { GeneralPreferences } from './GeneralPreferences';\n\nimport './UserPreferences.styl';\n\nconst tabs = [\n  {\n    name: 'Hotkeys',\n    Component: HotkeysPreferences,\n    customProps: {},\n  },\n  {\n    name: 'General',\n    Component: GeneralPreferences,\n    customProps: {},\n  },\n  {\n    name: 'Window Level',\n    Component: WindowLevelPreferences,\n    customProps: {},\n  },\n];\n\nfunction UserPreferences({ hide }) {\n  const customProps = {\n    onClose: hide,\n  };\n  return <TabComponents tabs={tabs} customProps={customProps} />;\n}\n\nUserPreferences.propTypes = {\n  hide: PropTypes.func,\n};\n\nexport { UserPreferences };\n","import React, { useState, useEffect } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Dropdown, AboutContent, withModal } from '@ohif/ui';\n//\nimport { UserPreferences } from './../UserPreferences';\nimport OHIFLogo from '../OHIFLogo/OHIFLogo.js';\nimport './Header.css';\n\nfunction Header(props) {\n  const {\n    t,\n    user,\n    userManager,\n    modal: { show },\n    useLargeLogo,\n    linkPath,\n    linkText,\n    location,\n    children,\n  } = props;\n\n  const [options, setOptions] = useState([]);\n  const hasLink = linkText && linkPath;\n\n  useEffect(() => {\n    const optionsValue = [\n      {\n        title: t('About'),\n        icon: { name: 'info' },\n        onClick: () =>\n          show({\n            content: AboutContent,\n            title: t('OHIF Viewer - About'),\n          }),\n      },\n      {\n        title: t('Preferences'),\n        icon: {\n          name: 'user',\n        },\n        onClick: () =>\n          show({\n            content: UserPreferences,\n            title: t('User Preferences'),\n          }),\n      },\n    ];\n\n    if (user && userManager) {\n      optionsValue.push({\n        title: t('Logout'),\n        icon: { name: 'power-off' },\n        onClick: () => userManager.signoutRedirect(),\n      });\n    }\n\n    setOptions(optionsValue);\n  }, [setOptions, show, t, user, userManager]);\n\n  return (\n    <>\n      <div\n        className={classNames('entry-header', { 'header-big': useLargeLogo })}\n      >\n        <div className=\"header-left-box\">\n          {location && location.studyLink && (\n            <Link\n              to={location.studyLink}\n              className=\"header-btn header-viewerLink\"\n            >\n              {t('Back to Viewer')}\n            </Link>\n          )}\n\n          {children}\n\n          {hasLink && (\n            <Link\n              className=\"header-btn header-studyListLinkSection\"\n              to={{\n                pathname: linkPath,\n                state: { studyLink: location.pathname },\n              }}\n            >\n              {t(linkText)}\n            </Link>\n          )}\n        </div>\n\n        <div className=\"header-menu\">\n          <Dropdown title={t('Options')} list={options} align=\"right\" />\n        </div>\n      </div>\n    </>\n  );\n}\n\nHeader.propTypes = {\n  // Study list, /\n  linkText: PropTypes.string,\n  linkPath: PropTypes.string,\n  useLargeLogo: PropTypes.bool,\n  //\n  location: PropTypes.object.isRequired,\n  children: PropTypes.node,\n  t: PropTypes.func.isRequired,\n  userManager: PropTypes.object,\n  user: PropTypes.object,\n  modal: PropTypes.object,\n};\n\nHeader.defaultProps = {\n  useLargeLogo: false,\n  children: OHIFLogo(),\n};\n\nexport default withTranslation(['Header', 'AboutModal'])(\n  withRouter(withModal(Header))\n);\n","import Header from '../components/Header/Header.js';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    user: state.oidc && state.oidc.user,\n  };\n};\n\nconst ConnectedHeader = connect(mapStateToProps)(Header);\n\nexport default ConnectedHeader;\n","export default class FileLoader {\n  fileType;\n  loadFile(file, imageId) { }\n  getDataset(image, imageId) { }\n  getStudies(dataset, imageId) { }\n}\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\n\nconst PDFFileLoader = new (class extends FileLoader {\n  fileType = 'application/pdf';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    const dataset = {};\n    dataset.imageId = image.imageId || imageId;\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getDefaultStudy(imageId);\n  }\n\n  getDefaultStudy(imageId) {\n    const study = {\n      StudyInstanceUID: '',\n      StudyDate: '',\n      StudyTime: '',\n      AccessionNumber: '',\n      ReferringPhysicianName: '',\n      PatientName: '',\n      PatientID: '',\n      PatientBirthdate: '',\n      PatientSex: '',\n      StudyId: '',\n      StudyDescription: '',\n      series: [\n        {\n          SeriesInstanceUID: '',\n          SeriesDescription: '',\n          SeriesNumber: '',\n          instances: [\n            {\n              metadata: {\n                SOPInstanceUID: '',\n                SOPClassUID: '1.2.840.10008.5.1.4.1.1.104.1',\n                Rows: '',\n                Columns: '',\n                NumberOfFrames: 0,\n                InstanceNumber: 1,\n              },\n              getImageId: () => imageId,\n              isLocalFile: true,\n            },\n          ],\n        },\n      ],\n    };\n\n    return study;\n  }\n})();\n\nexport default PDFFileLoader;\n","import dcmjs from 'dcmjs';\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport OHIF from '@ohif/core';\n\nconst metadataProvider = OHIF.cornerstone.metadataProvider;\n\nconst DICOMFileLoader = new (class extends FileLoader {\n  fileType = 'application/dicom';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    let dataset = {};\n    try {\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\n\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      metadataProvider.addInstance(dataset);\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n    } catch (e) {\n      console.error('Error reading dicom file', e);\n    }\n    // Set imageId on dataset to be consumed later on\n    dataset.imageId = imageId;\n\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getStudyFromDataset(dataset);\n  }\n\n  getStudyFromDataset(dataset = {}) {\n    const {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      SeriesInstanceUID,\n      SeriesDescription,\n      SeriesNumber,\n      imageId,\n    } = dataset;\n\n    const instance = {\n      metadata: dataset,\n      url: imageId,\n    };\n\n    const series = {\n      SeriesInstanceUID: SeriesInstanceUID,\n      SeriesDescription: SeriesDescription,\n      SeriesNumber: SeriesNumber,\n      instances: [instance],\n    };\n\n    const study = {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      /*\n      TODO: in case necessary to uncomment this block, double check every property\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\n      Modality: Modality || DICOMWeb.getString(dataset['00080060']),\n      ModalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\n      modalities:\n      */\n      series: [series],\n    };\n\n    return study;\n  }\n})();\n\nexport default DICOMFileLoader;\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport PDFFileLoader from './pdfFileLoader';\nimport DICOMFileLoader from './dicomFileLoader';\n\nclass FileLoaderService extends FileLoader {\n  fileType;\n  loader;\n  constructor(file) {\n    super();\n    const fileType = file && file.type;\n    this.loader = this.getLoader(fileType);\n    this.fileType = this.loader.fileType;\n  }\n\n  static groupSeries(studies) {\n    const groupBy = (list, groupByKey, listKey) => {\n      let nonKeyCounter = 1;\n\n      return list.reduce((acc, obj) => {\n        let key = obj[groupByKey];\n        const list = obj[listKey];\n\n        // in case key not found, group it using counter\n        key = !!key ? key : '' + nonKeyCounter++;\n\n        if (!acc[key]) {\n          acc[key] = { ...obj };\n          acc[key][listKey] = [];\n        }\n\n        acc[key][listKey].push(...list);\n\n        return acc;\n      }, {});\n    };\n\n    const studiesGrouped = Object.values(\n      groupBy(studies, 'StudyInstanceUID', 'series')\n    );\n\n    const result = studiesGrouped.map(studyGroup => {\n      const seriesGrouped = groupBy(\n        studyGroup.series,\n        'SeriesInstanceUID',\n        'instances'\n      );\n      studyGroup.series = Object.values(seriesGrouped);\n\n      return studyGroup;\n    });\n\n    return result;\n  }\n\n  addFile(file) {\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\n  }\n\n  loadFile(file, imageId) {\n    return this.loader.loadFile(file, imageId);\n  }\n\n  getDataset(image, imageId) {\n    return this.loader.getDataset(image, imageId);\n  }\n\n  getStudies(dataset, imageId) {\n    return this.loader.getStudies(dataset, imageId);\n  }\n\n  getLoader(fileType) {\n    if (fileType === 'application/pdf') {\n      return PDFFileLoader;\n    } else {\n      // Default to dicom loader\n      return DICOMFileLoader;\n    }\n  }\n}\n\nexport default FileLoaderService;\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\n\nconst processFile = async file => {\n  try {\n    const fileLoaderService = new FileLoaderService(file);\n    const imageId = fileLoaderService.addFile(file);\n    const image = await fileLoaderService.loadFile(file, imageId);\n    const dataset = await fileLoaderService.getDataset(image, imageId);\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\n\n    return studies;\n  } catch (error) {\n    console.log(\n      error.name,\n      ':Error when trying to load and process local files:',\n      error.message\n    );\n  }\n};\n\nexport default async function filesToStudies(files) {\n  const processFilesPromises = files.map(processFile);\n  const studies = await Promise.all(processFilesPromises);\n\n  return FileLoaderService.groupSeries(studies.flat());\n}\n","import React, { Component } from 'react';\nimport { metadata, utils } from '@ohif/core';\n\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from '../App.js';\nimport Dropzone from 'react-dropzone';\nimport filesToStudies from '../lib/filesToStudies';\nimport './ViewerLocalFileData.css';\nimport { withTranslation } from 'react-i18next';\nconst JSZip = require('JSZip');\n\nconst { OHIFStudyMetadata } = metadata;\nconst { studyMetadataManager } = utils;\n\nclass ViewerLocalFileData extends Component {\n  static propTypes = {\n    studies: PropTypes.array,\n  };\n\n  state = {\n    studies: null,\n    loading: false,\n    error: null,\n  };\n\n  updateStudies = studies => {\n    // Render the viewer when the data is ready\n    studyMetadataManager.purge();\n\n    // Map studies to new format, update metadata manager?\n    const updatedStudies = studies.map(study => {\n      const studyMetadata = new OHIFStudyMetadata(\n        study,\n        study.StudyInstanceUID\n      );\n      const sopClassHandlerModules =\n        extensionManager.modules['sopClassHandlerModule'];\n\n      study.displaySets =\n        study.displaySets ||\n        studyMetadata.createDisplaySets(sopClassHandlerModules);\n\n      studyMetadata.forEachDisplaySet(displayset => {\n        displayset.localFile = true;\n      });\n\n      studyMetadataManager.add(studyMetadata);\n\n      return study;\n    });\n\n    this.setState({\n      studies: updatedStudies,\n    });\n  };\n\n  render() {\n    const onLoad = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const url = urlParams.get('url');\n      if (!url) return;\n      this.setState({ loading: true });\n      const data = await fetch(url).then(response => response.blob());\n      const zip = new JSZip();\n      const content = await zip.loadAsync(data);\n      const files = [];\n      for (const filename in content.files) {\n        if (zip.file(filename)) {\n          const blob = await zip.file(filename).async('blob');\n          files.push(new File([blob], filename));\n        }\n      }\n      const studies = await filesToStudies(files);\n      const updatedStudies = this.updateStudies(studies);\n\n      if (!updatedStudies) {\n        return;\n      }\n\n      this.setState({ studies: updatedStudies, loading: false });\n    };\n\n    if (this.state.error) {\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\n    }\n\n    return (\n      <Dropzone onDrop={onLoad} noClick>\n        {({ getRootProps, getInputProps }) => (\n          <div {...getRootProps()} style={{ width: '100%', height: '100%' }}>\n            {this.state.studies ? (\n              <ConnectedViewer\n                studies={this.state.studies}\n                studyInstanceUIDs={\n                  this.state.studies &&\n                  this.state.studies.map(a => a.StudyInstanceUID)\n                }\n              />\n            ) : (\n              <div className={'drag-drop-instructions'}>\n                <div className={'drag-drop-contents'}>\n                  {this.state.loading ? (\n                    <h3>{this.props.t('Loading...')}</h3>\n                  ) : (\n                    <>\n                      <h3 style={{ cursor: 'pointer' }} onClick={onLoad}>\n                        START\n                      </h3>\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nexport default withTranslation('Common')(ViewerLocalFileData);\n"],"sourceRoot":""}